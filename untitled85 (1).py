# -*- coding: utf-8 -*-
"""Untitled85.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yixXmaOzIw7s3ayuxDuvkNI7hX7ULEfO
"""

import pandas as pd
CSV = "/content/CardioVascular disease data.csv"   # adjust if path differs
df  = pd.read_csv(CSV, parse_dates=["year_month"])
df.head()

import pathlib, shutil, textwrap, os

PROJ = pathlib.Path("cvd_app"); (PROJ/"pages").mkdir(parents=True, exist_ok=True)
DATA = PROJ/"data"; DATA.mkdir(exist_ok=True)

shutil.copy(CSV, DATA/CSV.split("/")[-1])      # copy your CSV inside the project

# ── utils.py ───────────────────────────────────────────────
(PROJ/"utils.py").write_text(textwrap.dedent(f"""
import pandas as pd, functools, pathlib
DATA = pathlib.Path(__file__).parent/'data'
FCSV = '{CSV.split('/')[-1]}'

@functools.lru_cache(maxsize=1)
def load_monthly():
    return pd.read_csv(DATA/FCSV,
                       parse_dates=['year_month'],
                       dtype={{'sex':'category','age_band':'category',
                              'residence':'category'}})

@functools.lru_cache(maxsize=1)
def load_patients():
    path = DATA/'patient_level.parquet'     # drop in later if you have it
    return pd.read_parquet(path) if path.exists() else None
"""))

# ── Home.py (KPI + trend) ─────────────────────────────────
(PROJ/"Home.py").write_text(textwrap.dedent("""
import streamlit as st, plotly.express as px, pandas as pd
from utils import load_monthly

st.set_page_config('CVD Dashboard', layout='wide')
df = load_monthly()

# global sidebar filters
st.sidebar.header('Filters')
sex_f = st.sidebar.multiselect('Sex', ['M','F'], default=['M','F'])
age_f = st.sidebar.multiselect('Age band', df.age_band.cat.categories,
                               default=list(df.age_band.cat.categories))
res_f = st.sidebar.multiselect('Residence', sorted(df.residence.unique()),
                               default=list(df.residence.unique()))
filt  = df[df.sex.isin(sex_f)&df.age_band.isin(age_f)&df.residence.isin(res_f)]

st.title('🫀 Cardiovascular Surgery Cohort – Lebanon')
latest = filt.year_month.max()
curr   = filt.loc[filt.year_month==latest,'cvd_cases'].sum()
prev   = filt.loc[filt.year_month==latest-pd.offsets.MonthEnd(),'cvd_cases'].sum()
delta  = (curr-prev)/prev if prev else 0

c1,c2 = st.columns(2)
c1.metric('CVD cases (latest month)', f'{curr:,}', f'{delta:+.1%}')
c2.metric('Time span', f'{filt.year_month.min():%Y-%m} → {latest:%Y-%m}')

trend = filt.groupby('year_month')['cvd_cases'].sum().reset_index()
st.plotly_chart(px.line(trend, x='year_month', y='cvd_cases', markers=True,
                        title='Monthly CVD cases'),
                use_container_width=True)
"""))

# ── Demographics page ────────────────────────────────────
(PROJ/"pages"/"1_Demographics.py").write_text(textwrap.dedent("""
import streamlit as st, plotly.express as px
from utils import load_monthly
df = load_monthly()
sex_f = st.sidebar.session_state['sex']; age_f=st.sidebar.session_state['age_band']; res_f=st.sidebar.session_state['residence']
filt = df[df.sex.isin(sex_f)&df.age_band.isin(age_f)&df.residence.isin(res_f)]
st.title('👥 Age–sex pyramid')
yr = st.slider('Year', int(df.year_month.dt.year.min()),
                         int(df.year_month.dt.year.max()),
                         value=int(df.year_month.dt.year.max()))
sub = filt[filt.year_month.dt.year==yr]
pivot = (sub.pivot_table(index='age_band', columns='sex',
                         values='cvd_cases', aggfunc='sum')
            .fillna(0).sort_index())
pivot['F'] = -pivot['F']
fig = px.bar(pivot, orientation='h', height=520, title=str(yr),
             labels={'value':'Cases','age_band':'Age band'})
fig.update_layout(yaxis={'categoryorder':'array','categoryarray':pivot.index[::-1]})
st.plotly_chart(fig, use_container_width=True)
"""))

# ── Geography page (optional map) ────────────────────────
(PROJ/"pages"/"2_Geography.py").write_text(textwrap.dedent("""
import streamlit as st, geopandas as gpd, plotly.express as px, pandas as pd
from utils import load_monthly, DATA
if not (DATA/'lebanon.geojson').exists():
    st.info('Upload lebanon.geojson to cvd_app/data/ to enable this map.')
    st.stop()
geo = gpd.read_file(DATA/'lebanon.geojson')
df  = load_monthly()
sex_f = st.sidebar.session_state['sex']; age_f = st.sidebar.session_state['age_band']
filt = df[df.sex.isin(sex_f)&df.age_band.isin(age_f)]
month = st.selectbox('Month', filt.year_month.sort_values().unique()[::-1])
sub = filt[filt.year_month==pd.to_datetime(month)]
agg = sub.groupby('residence')['cvd_cases'].sum().reset_index()
mapdf = geo.merge(agg, left_on='NAME_EN', right_on='residence', how='left')
mapdf['cvd_cases'] = mapdf['cvd_cases'].fillna(0)
fig = px.choropleth(mapdf, geojson=mapdf.geometry, locations=mapdf.index,
                    color='cvd_cases', hover_name='NAME_EN',
                    color_continuous_scale='Reds')
fig.update_geos(fitbounds='locations', visible=False)
st.title('🗺️ Geographic burden'); st.plotly_chart(fig, use_container_width=True)
"""))

# ── Subtypes page (needs htn/cad/pad/dm cols) ───────────
(PROJ/"pages"/"3_Subtypes.py").write_text(textwrap.dedent("""
import streamlit as st, plotly.express as px
from utils import load_monthly
df = load_monthly()
if not {'htn','cad','pad','dm'}.issubset(df.columns):
    st.info('Subtype columns not present.')
    st.stop()
sex_f = st.sidebar.session_state['sex']; age_f=st.sidebar.session_state['age_band']; res_f=st.sidebar.session_state['residence']
filt = df[df.sex.isin(sex_f)&df.age_band.isin(age_f)&df.residence.isin(res_f)]
subtype = st.selectbox('Subtype', ['htn','cad','pad','dm'])
trend = filt.groupby('year_month')[subtype].sum().reset_index()
st.title('🩺 '+subtype.upper()); st.plotly_chart(px.area(trend, x='year_month', y=subtype), use_container_width=True)
"""))

# ── Prediction page (optional) ──────────────────────────
(PROJ/"pages"/"4_Prediction.py").write_text(textwrap.dedent("""
import streamlit as st, pandas as pd
from utils import load_patients
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import roc_auc_score
patients = load_patients()
if patients is None or 'ICU stay' not in patients.columns:
    st.info('patient_level.parquet not provided.')
    st.stop()
patients['icu_gt5'] = (patients['ICU stay']>5).astype(int)
X = patients[['cvd_flag','age','clampage','fe']].fillna(0); y=patients['icu_gt5']
Xtr,Xts,ytr,yts = train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)
auc = roc_auc_score(yts, GradientBoostingClassifier().fit(Xtr,ytr).predict_proba(Xts)[:,1])
st.metric('Hold-out AUC', f'{auc:.3f}')
"""))

# ── requirements.txt ───────────────────────────────────
(PROJ/"requirements.txt").write_text("streamlit\nplotly\npandas\nnumpy\ngeopandas\nshapely\nscikit-learn\n")
print("✅ project scaffolded at", PROJ.resolve())

!pip install streamlit plotly --quiet
import threading, os, time, random, json
PORT=8501
def run(): os.system(f"streamlit run cvd_app/Home.py --server.headless true --server.address 0.0.0.0 --server.port {PORT}")
threading.Thread(target=run, daemon=True).start(); time.sleep(6)
from google.colab import output; print("🔗", output.eval_js(f"google.colab.kernel.proxyPort({PORT})"))

!sudo apt-get -q install git
!git -C cvd_app init -q
!git -C cvd_app add .
!git -C cvd_app commit -qm "Initial dashboard"

TOKEN="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"
USER="your-github-Ritaabdelnourr"
REPO="cvd-dashboard"

!git -C cvd_app remote add origin https://{TOKEN}@github.com/{USER}/{REPO}.git
!git -C cvd_app branch -M main
!git -C cvd_app push -q -u origin main

# 3-A  --- push cvd_app to GitHub ------------------------------------------
# (1) install git if not in the Colab image
!sudo apt-get -q install git

# (2) set a throw-away identity for this Colab session
!git config --global user.name  "Rita Abdel Nour (Colab)"
!git config --global user.email "you@example.com"

# (3) make sure we are INSIDE the project folder
import pathlib, os, sys
assert pathlib.Path("cvd_app").is_dir(), "❌ cvd_app folder does not exist."
os.chdir("cvd_app")            # now we're in /content/cvd_app

# (4) initialise repo, add everything, commit
!git init -q
!git add .
!git commit -qm "Initial Streamlit dashboard"

# (5) add GitHub remote & push  — <<<  ONLY LINES TO EDIT  >>>
TOKEN="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"   # ← keep the quotes
USER="Ritaabdelnourr"                               # ← your GitHub username
REPO="cvd-dashboard"                                # ← repo you created

!git remote add origin https://{TOKEN}@github.com/{USER}/{REPO}.git
!git branch -M main
!git push -u origin main
os.chdir("..")      # return to /content
print("✅  Push complete — check https://github.com/{USER}/{REPO}")

# Commented out IPython magic to ensure Python compatibility.
##############################################################################
# 1-A  Clone the repo to Colab                                              #
##############################################################################
TOKEN  = "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"   # ← your PAT
USER   = "Ritaabdelnourr"
REPO   = "cvd-dashboard"

# fresh clone into /content/cvd-dashboard
!rm -rf /content/cvd-dashboard
!git clone -q https://{TOKEN}@github.com/{USER}/{REPO}.git

##############################################################################
# 1-B  Copy the finished Streamlit folder into that repo                    #
##############################################################################
import shutil, pathlib, os, sys
assert pathlib.Path("/content/cvd_app").is_dir(), "❌ cvd_app folder not found."

shutil.rmtree("/content/cvd-dashboard/cvd_app", ignore_errors=True)  # clean old
shutil.copytree("/content/cvd_app", "/content/cvd-dashboard/cvd_app")

##############################################################################
# 1-C  Commit and push                                                     #
##############################################################################
# %cd /content/cvd-dashboard
!git add cvd_app
!git commit -qm "Add Streamlit dashboard (cvd_app folder)"
!git push -q origin main
# %cd ..
print("✅ cvd_app folder is now in the GitHub repo.")

!zip -rq cvd_app.zip cvd_app        # create a zip of the whole folder

from google.colab import files
files.download("cvd_app.zip")       # a download prompt appears